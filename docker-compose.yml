version: "3"

services:

#######################################################################################################
# Nom de la section du conteneur mariadb (Il permet entre autre de définir un espace du code)
  mariadb:
    # Image mariadb provenant de Docker Hub (Indéxé de la version de mariadb choisi dans le fichier .env)
    image: wodby/mariadb:$MARIADB_TAG
    # Nom du conteneur (Préfixé du nom de votre projet se trouvant dans le fichier .env)
    container_name: "${PROJECT_NAME}_mariadb"
    # Définit le délai d'attente avant de forcer la destruction manuelle du conteneur mariadb
    stop_grace_period: 30s
    # Permet de définir les variables d'environnements de mariadb
    environment:
      # Définit le mot de passe root de MySQL
      MYSQL_ROOT_PASSWORD: $DB_ROOT_PASSWORD
      # Définit le nom de la base de données MySQL
      MYSQL_DATABASE: $DB_NAME
      # Définit le nom de l'utilisateur de la base MySQL
      MYSQL_USER: $DB_USER
      # Définit le mot de passe de l'utilosateur de la base MYSQL
      MYSQL_PASSWORD: $DB_PASSWORD
 # Cette partie volume de mariadb, vous permet d'initialiser votre base de données depuis un fichier .sql
 #   volumes:
 #     - ./mariadb-init:/docker-entrypoint-initdb.d # Placer votre fichier d'initialsation .sql à cette adresse.

#######################################################################################################
  # Nom de la section du conteneur php
  php:
    # Image PHP provenant de Docker Hub (Indéxé de la version de php choisi dans le fichier .env)
    image: wodby/drupal-php:$PHP_TAG
    # Nom du conteneur (Préfixé du nom de votre projet se trouvant dans le fichier .env)
    container_name: "${PROJECT_NAME}_php"
    # Permet de définir les variables d'environnements
    environment:
      # Définit l'hôte de la Base de données  
      DB_HOST: $DB_HOST
      # Définit le port d'accès à la Base de données
      DB_PORT: $DB_PORT
      # Définit le nom de l'utilisateur de la base MySQL
      DB_USER: $DB_USER
      # Définit le mot de passe de l'utilisateur de la base MySQL
      DB_PASSWORD: $DB_PASSWORD
      # Définit le nom de la base MySQL
      DB_NAME: $DB_NAME
      # Définit le pilote de la base de données (dans notre cas nous utilisons une base mariadb donc -> MySQL)
      DB_DRIVER: $DB_DRIVER
      # Ces deux variables représentes les paramètre du FastCGI Process Manager (appelé également 'FPM')
      PHP_FPM_USER: wodby
      PHP_FPM_GROUP: wodby
      COLUMNS: 80
    # Définit la chemin ou se trouve votre projet Drupal, afin que PHP connaissent l'emplacement pour lequel il doit agir
    volumes:
      - ./:/var/www/html

#######################################################################################################
  # Nom de la section du conteneur nginx
  nginx:
    # Image nginx provenant de Docker Hub (Indéxé de la version de nginx choisi dans le fichier .env)
    image: wodby/nginx:$NGINX_TAG
    # Nom du conteneur (Préfixé du nom de votre projet se trouvant dans le fichier .env)
    container_name: "${PROJECT_NAME}_nginx"
    # Permet de définir les dépendances de php aux autres conteneurs
    depends_on:
      - php
    # Permet de définir les variables d'environnements
    environment:
      # Permet de définir si oui ou non nous voulons activer l'ouverture de la mise en cache proposé par nginx
      NGINX_STATIC_OPEN_FILE_CACHE: "off"
      # Permet de définir la compléxité des messages de log retourné par Nginx (Dans notre cas Debug)
      NGINX_ERROR_LOG_LEVEL: debug
      # Permettre de définir l'hôte backend de nginx
      NGINX_BACKEND_HOST: php
      # Permet de définir le chemin d'accès au root sur nginx
      NGINX_SERVER_ROOT: /var/www/html/web
      # Définit un preset vhost de configuration (dans notre cas drupal 8)
      NGINX_VHOST_PRESET: $NGINX_VHOST_PRESET
     # Définit la chemin ou se trouve votre projet Drupal, afin que Nginx connaissent l'emplacement sur lequel il doit agir
    volumes:
      - ./:/var/www/html
    # Définit l'URL d'accès du serveur web depuis traefik
    labels:
      - "traefik.http.routers.${PROJECT_NAME}_nginx.rule=Host(`${PROJECT_BASE_URL}`)"

#######################################################################################################
  # Nom de la section du conteneur varnish
  varnish:
    # Image nginx venant de Docker Hub (Indéxé de la version de varnish choisi dans le fichier .env)
    image: wodby/varnish:$VARNISH_TAG
    # Nom du conteneur (Préfixé du nom de votre projet se trouvant dans le fichier .env)
    container_name: "${PROJECT_NAME}_varnish"
    # Définit les dépendances de varnish aux autres conteneurs
    depends_on:
      - nginx
    # Permet de définir les variables d'environnement
    environment:
      # Clé secret de varnish
      VARNISH_SECRET: secret
      # Permet de définir le conteneur hôte que varnish va prendre en charge
      VARNISH_BACKEND_HOST: nginx
      # Permet de définir le port sur lequel varnish va prendre en charge les mises en caches
      VARNISH_BACKEND_PORT: 80
      # Permet d'identifier le nom de la configuration prédéfinie de varnish
      VARNISH_CONFIG_PRESET: drupal
      # Permet d'idiquer si nous acceptons de ne pas restreindre les purges de varnish (0 = Non / 1 = Oui)
      VARNISH_ALLOW_UNRESTRICTED_PURGE: 1
    # Définit l'URL de sorti de la page de configuration de varnish depuis traefik
    labels:
      - "traefik.http.services.${PROJECT_NAME}_varnish.loadbalancer.server.port=6081"
      - "traefik.http.routers.${PROJECT_NAME}_varnish.rule=Host(`varnish.${PROJECT_BASE_URL}`)"

#######################################################################################################
  elasticsearch:
    image: wodby/elasticsearch:$ELASTICSEARCH_TAG
    environment:
      ES_JAVA_OPTS: "-Xms500m -Xmx500m"
    ulimits:
      memlock:
        soft: -1
        hard: -1

#######################################################################################################
  # Nom de la section du conteneur portainer
  portainer:
    # Image portainer venant de Docker Hub
    image: portainer/portainer
    # Nom du conteneur (Préfixé du nom de votre projet se trouvant dans le fichier .env)
    container_name: "${PROJECT_NAME}_portainer"
    # Commande exécuté lors de la création du serveur Docker (après exécution de la commande : docker-compose up -d)
    command: --no-auth -H unix:///var/run/docker.sock
    # Définit la chemin ou se trouve votre projet Drupal, afin que Nginx connaissent l'emplacement sur lequel il doit agir
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    # Définit la chemin ou se trouve votre le fichier de prépogrammation algorithmique .sock de Docker, afin que Portainer connaissent l'emplacement sur lequel il doit agir
    labels:
      - "traefik.http.routers.${PROJECT_NAME}_portainer.rule=Host(`portainer.${PROJECT_BASE_URL}`)"

#######################################################################################################
  # Nom de la section du conteneur traefik
  traefik:
    # Image traefik venant de Docker Hub
    image: traefik:v2.0
    # Nom du conteneur (Préfixé du nom de votre projet se trouvant dans le fichier .env)
    container_name: "${PROJECT_NAME}_traefik"
    # Commande exécuté lors de la création du serveur Docker (après exécution de la commande : docker-compose up -d)
    command: --api.insecure=true --providers.docker
    # Définit le port d'accès au stack Docker comprenant tous les composants de notre serveur web 
    ports:
      - '[PORT_DISPONIBLE]:80'
#      - '8080:8080' # Dashboard
    # Définit la chemin ou se trouve votre le fichier de prépogrammation algorithmique .sock de Docker, afin que Traefik connaissent l'emplacement sur lequel il doit agir
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock



#######################################################################################################
#                                         CONTENEUR PRECONFIGURE
#######################################################################################################
# Les conteneurs affichés en dessous sont des conteneurs pouvant être utilisés dans la création
# d'un serveur web pour drupal 8, cependant vous n'êtes absolument pas obligé de les utiliser.

#######################################################################################################
# mailhog:
#    image: mailhog/mailhog
#    container_name: "${PROJECT_NAME}_mailhog"
#    labels:
#      - "traefik.http.services.${PROJECT_NAME}_mailhog.loadbalancer.server.port=8025"
#      - "traefik.http.routers.${PROJECT_NAME}_mailhog.rule=Host(`mailhog.${PROJECT_BASE_URL}`)"

#######################################################################################################
### REMPLACER À LA PLACE DU CONTENEUR mariadb
#  postgres:
#    image: wodby/postgres:$POSTGRES_TAG
#    container_name: "${PROJECT_NAME}_postgres"
#    stop_grace_period: 30s
#    environment:
#      POSTGRES_PASSWORD: $DB_PASSWORD
#      POSTGRES_DB: $DB_NAME
#      POSTGRES_USER: $DB_USER
#    volumes:
#      - ./postgres-init:/docker-entrypoint-initdb.d # Place init file(s) here.
#      - /path/to/postgres/data/on/host:/var/lib/postgresql/data # Use bind mount

#######################################################################################################
### REMPLACER À LA PLACE DU CONTENEUR nginx
#  apache:
#    image: wodby/apache:$APACHE_TAG
#    container_name: "${PROJECT_NAME}_apache"
#    depends_on:
#      - php
#    environment:
#      APACHE_LOG_LEVEL: debug
#      APACHE_BACKEND_HOST: php
#      APACHE_VHOST_PRESET: php
#      APACHE_DOCUMENT_ROOT: /var/www/html/web
#    volumes:
#      - ./:/var/www/html
## For macOS users (https://wodby.com/docs/stacks/drupal/local#docker-for-mac)
##      - ./:/var/www/html:cached # User-guided caching
##      - docker-sync:/var/www/html # Docker-sync
#    labels:
#      - "traefik.http.routers.${PROJECT_NAME}_apache.rule=Host(`${PROJECT_BASE_URL}`)"

#######################################################################################################
#  pma:
#    image: phpmyadmin/phpmyadmin
#    container_name: "${PROJECT_NAME}_pma"
#    environment:
#      PMA_HOST: $DB_HOST
#      PMA_USER: $DB_USER
#      PMA_PASSWORD: $DB_PASSWORD
#      PHP_UPLOAD_MAX_FILESIZE: 1G
#      PHP_MAX_INPUT_VARS: 1G
#    labels:
#      - "traefik.http.routers.${PROJECT_NAME}_pma.rule=Host(`pma.${PROJECT_BASE_URL}`)"

#######################################################################################################
### REMPLACER À LA PLACE DU CONTENEUR varnish
#  redis:
#    container_name: "${PROJECT_NAME}_redis"
#    image: wodby/redis:$REDIS_TAG

#######################################################################################################
#  adminer:
#    container_name: "${PROJECT_NAME}_adminer"
#    image: wodby/adminer:$ADMINER_TAG
#    environment:
## For PostgreSQL:
##      ADMINER_DEFAULT_DB_DRIVER: pgsql
#      ADMINER_DEFAULT_DB_HOST: $DB_HOST
#      ADMINER_DEFAULT_DB_NAME: $DB_NAME
#    labels:
#      - "traefik.http.routers.${PROJECT_NAME}_adminer.rule=Host(`adminer.${PROJECT_BASE_URL}`)"

#######################################################################################################
#  drupal-node:
#    image: wodby/drupal-node:$DRUPAL_NODE_TAG
#    container_name: "${PROJECT_NAME}_drupal_nodejs"
#    environment:
#       NODE_SERVICE_KEY: node-service-key
#    labels:
#      - "traefik.http.routers.${PROJECT_NAME}_drupal_node.rule=Host(`drupal_node.${PROJECT_BASE_URL}`)"
#    volumes:
#      - ./path/to/your/single-page-app:/app
#    command: sh -c 'npm install && npm run start'

#######################################################################################################
### REMPLACER À LA PLACE DU CONTENEUR varnish
#  memcached:
#    container_name: "${PROJECT_NAME}_memcached"
#    image: wodby/memcached:$MEMCACHED_TAG

#######################################################################################################
#  rsyslog:
#    container_name: "${PROJECT_NAME}_rsyslog"
#    image: wodby/rsyslog:$RSYSLOG_TAG

#######################################################################################################
#  athenapdf:
#    image: arachnysdocker/athenapdf-service:$ATHENAPDF_TAG
#    container_name: "${PROJECT_NAME}_athenapdf"
#    environment:
#      WEAVER_AUTH_KEY: weaver-auth-key
#      WEAVER_ATHENA_CMD: "athenapdf -S"
#      WEAVER_MAX_WORKERS: 10
#      WEAVER_MAX_CONVERSION_QUEUE: 50
#      WEAVER_WORKER_TIMEOUT: 90
#      WEAVER_CONVERSION_FALLBACK: "false"

#######################################################################################################
#  node:
#    image: wodby/node:$NODE_TAG
#    container_name: "${PROJECT_NAME}_node"
#    working_dir: /var/www/html/path/to/theme/to/build
#    labels:
#      - "traefik.http.services.${PROJECT_NAME}_node.loadbalancer.server.port=3000"
#      - "traefik.http.routers.${PROJECT_NAME}_node.rule=Host(`node.${PROJECT_BASE_URL}`)"
#    expose:
#      - "3000"
#    volumes:
#      - ./:/var/www/html
#    command: sh -c 'yarn install && yarn run start'

#######################################################################################################
#  blackfire:
#    image: blackfire/blackfire
#    container_name: "${PROJECT_NAME}_blackfire"
#    environment:
#      BLACKFIRE_SERVER_ID: XXXXX
#      BLACKFIRE_SERVER_TOKEN: YYYYY

#######################################################################################################
#  webgrind:
#    image: wodby/webgrind:$WEBGRIND_TAG
#    container_name: "${PROJECT_NAME}_webgrind"
#    environment:
#      WEBGRIND_PROFILER_DIR: /mnt/files/xdebug/profiler
#    labels:
#      - "traefik.http.routers.${PROJECT_NAME}_webgrind.rule=Host(`webgrind.${PROJECT_BASE_URL}`)"
#    volumes:
#      - files:/mnt/files

#######################################################################################################
### REMPLACER À LA PLACE DU CONTENEUR elasticsearch
# Nom de la section du conteneur solr
#  solr:
#  # Image solr venant de Docker Hub (Indéxé de la version de solr choisi dans le fichier .env)
#    image: wodby/solr:$SOLR_TAG
#    # Nom du conteneur (Préfixé du nom de votre projet se trouvant dans le fichier .env)
#    container_name: "${PROJECT_NAME}_solr"
#    # Permet de définir les variables d'environnements
#    environment:
#      # Permet de définir la version de la configuration par défault de Solr
#      SOLR_DEFAULT_CONFIG_SET: $SOLR_CONFIG_SET
#      SOLR_HEAP: 1024m
#    # Définit l'URL de sortie de la page de configuration de solr depuis traefik
#    labels:
#      - "traefik.http.routers.${PROJECT_NAME}_solr.rule=Host(`solr.${PROJECT_BASE_URL}`)"

#######################################################################################################
#  kibana:
#    image: wodby/kibana:$KIBANA_TAG
#    depends_on:
#      - elasticsearch
#    labels:
#      - "traefik.http.services.${PROJECT_NAME}_kibana.loadbalancer.server.port=5601"
#      - "traefik.http.routers.${PROJECT_NAME}_kibana.rule=Host(`kibana.${PROJECT_BASE_URL}`)"

#######################################################################################################
#  opensmtpd:
#    container_name: "${PROJECT_NAME}_opensmtpd"
#    image: wodby/opensmtpd:$OPENSMTPD_TAG

#######################################################################################################
#  xhprof:
#    image: wodby/xhprof:$XHPROF_TAG
#    restart: always
#    volumes:
#      - files:/mnt/files
#    labels:
#      - "traefik.http.routers.${PROJECT_NAME}_xhprof.rule=Host(`xhprof.${PROJECT_BASE_URL}`)"

#######################################################################################################
#  chrome:
#    image: selenium/standalone-chrome:$SELENIUM_CHROME_TAG
#    container_name: "${PROJECT_NAME}_chrome"
#    volumes:
#      - /dev/shm:/dev/shm
#    entrypoint:
#      - chromedriver
#      - "--no-sandbox"
#      - "--disable-dev-shm-usage"
#      - "--log-path=/tmp/chromedriver.log"
#      - "--verbose"
#      - "--whitelisted-ips="

#######################################################################################################
#
#######################################################################################################