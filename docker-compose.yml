version: "3"

services:

#######################################################################################################
# Nom de la section du conteneur mariadb (Il permet entre autre de définir un espace du code)
  mariadb:
    # Image mariadb provenant de Docker Hub (Indéxé de la version de mariadb choisi dans le fichier .env)
    image: wodby/mariadb:$MARIADB_TAG
    # Nom du conteneur (Préfixé du nom de votre projet se trouvant dans le fichier .env)
    container_name: "${PROJECT_NAME}_mariadb"
    # Définit le délai d'attente avant de forcer la destruction manuelle du conteneur mariadb
    stop_grace_period: 30s
    # Permet de définir les variables d'environnements de mariadb
    environment:
      # Définit le mot de passe root de MySQL
      MYSQL_ROOT_PASSWORD: $DB_ROOT_PASSWORD
      # Définit le nom de la base de données MySQL
      MYSQL_DATABASE: $DB_NAME
      # Définit le nom de l'utilisateur de la base MySQL
      MYSQL_USER: $DB_USER
      # Définit le mot de passe de l'utilosateur de la base MYSQL
      MYSQL_PASSWORD: $DB_PASSWORD

#######################################################################################################
  # Nom de la section du conteneur php
  php:
    # Image PHP preovenant de Docker Hub (Indéxé de la version de php choisi dans le fichier .env)
    image: wodby/drupal-php:$PHP_TAG
    # Nom du conteneur (Préfixé du nom de votre projet se trouvant dans le fichier .env)
    container_name: "${PROJECT_NAME}_php"
    # Permet de définir les variables d'environnements
    environment:
      # Définit l'hôte de la Base de données  
      DB_HOST: $DB_HOST
      # Définit le port de la Base de données
      DB_PORT: $DB_PORT
      # Définit le nom de l'utilisateur de la base MySQL
      DB_USER: $DB_USER
      # Définit le mot de passe de l'utilisateur de la base MySQL
      DB_PASSWORD: $DB_PASSWORD
      # Définit le nom de la base MySQL
      DB_NAME: $DB_NAME
      # Définit le pilote de la base de données (dans notre cas nous utilisons une base mariadb donc -> MySQL)
      DB_DRIVER: $DB_DRIVER
      # Ces deux variables représentes les paramètre du FastCGI Process Manager (appelé également 'FPM')
      PHP_FPM_USER: wodby
      PHP_FPM_GROUP: wodby
      COLUMNS: 80
    # Définit la chemin ou se trouve votre projet Drupal, afin que PHP connaissent l'emplacement pour lequel il doit agir
    volumes:
      - ./:/var/www/html

#######################################################################################################
  # Nom de la section du conteneur nginx
  nginx:
    # Image nginx provenant de Docker Hub (Indéxé de la version de nginx choisi dans le fichier .env)
    image: wodby/nginx:$NGINX_TAG
    # Nom du conteneur (Préfixé du nom de votre projet se trouvant dans le fichier .env)
    container_name: "${PROJECT_NAME}_nginx"
    # Permet de définir les dépendances de php aux autres conteneurs
    depends_on:
      - php
    # Permet de définir les variables d'environnements
    environment:
      # Permet de définir si oui ou non nous voulons activer l'ouverture de la mise en cache proposé par nginx
      NGINX_STATIC_OPEN_FILE_CACHE: "off"
      # Permet de définir la compléxité des messages de log retourné par Nginx (Dans notre cas Debug)
      NGINX_ERROR_LOG_LEVEL: debug
      # Permettre de définir l'hôte backend de nginx
      NGINX_BACKEND_HOST: php
      # Permet de définir le chemin d'accès au root sur nginx
      NGINX_SERVER_ROOT: /var/www/html/web
      # Définit un preset vhost de configuration (dans notre cas drupal 8)
      NGINX_VHOST_PRESET: $NGINX_VHOST_PRESET
     # Définit la chemin ou se trouve votre projet Drupal, afin que Nginx connaissent l'emplacement sur lequel il doit agir
    volumes:
      - ./:/var/www/html
    # Définit l'URL d'accès du serveur web depuis traefik
    labels:
      - "traefik.http.routers.${PROJECT_NAME}_nginx.rule=Host(`${PROJECT_BASE_URL}`)"

#######################################################################################################
  # Nom de la section du conteneur varnish
  varnish:
    # Image nginx venant de Docker Hub (Indéxé de la version de varnish choisi dans le fichier .env)
    image: wodby/varnish:$VARNISH_TAG
    # Nom du conteneur (Préfixé du nom de votre projet se trouvant dans le fichier .env)
    container_name: "${PROJECT_NAME}_varnish"
    # Définit les dépendances de varnish aux autres conteneurs
    depends_on:
      - nginx
    # Permet de définir les variables d'environnement
    environment:
      # Clé d'encodage de varnish
      VARNISH_SECRET: secret
      # Permet de définir le conteneur hôte que varnish va prendre en charge
      VARNISH_BACKEND_HOST: nginx
      # Permet de définir le port sur lequel varnish va prendre en charge les mises en caches
      VARNISH_BACKEND_PORT: 80
      # Permet d'identifier le nom de la configuration prédéfinie de varnish
      VARNISH_CONFIG_PRESET: drupal
      # Permet d'idiquer si nous acceptons de ne pas restreindre les purges de varnish (0 = Non / 1 = Oui)
      VARNISH_ALLOW_UNRESTRICTED_PURGE: 1
    # Définit l'URL de sorti de la page de configuration de varnish depuis traefik
    labels:
      - "traefik.http.services.${PROJECT_NAME}_varnish.loadbalancer.server.port=6081"
      - "traefik.http.routers.${PROJECT_NAME}_varnish.rule=Host(`varnish.${PROJECT_BASE_URL}`)"

#######################################################################################################
  # Nom de la section du conteneur solr
  solr:
    # Image solr venant de Docker Hub (Indéxé de la version de solr choisi dans le fichier .env)
    image: wodby/solr:$SOLR_TAG
    # Nom du conteneur (Préfixé du nom de votre projet se trouvant dans le fichier .env)
    container_name: "${PROJECT_NAME}_solr"
    # Permet de définir les variables d'environnements
    environment:
      # Permet de définir la version de la configuration par défault de Solr
      SOLR_DEFAULT_CONFIG_SET: $SOLR_CONFIG_SET
      SOLR_HEAP: 1024m
    # Définit l'URL de sortie de la page de configuration de solr depuis traefik
    labels:
      - "traefik.http.routers.${PROJECT_NAME}_solr.rule=Host(`solr.${PROJECT_BASE_URL}`)"

#######################################################################################################
  # Nom de la section du conteneur portainer
  portainer:
    # Image portainer venant de Docker Hub
    image: portainer/portainer
    # Nom du conteneur (Préfixé du nom de votre projet se trouvant dans le fichier .env)
    container_name: "${PROJECT_NAME}_portainer"
    # Commande exécuté lors de la création du serveur Docker (après exécution de la commande : docker-compose up -d)
    command: --no-auth -H unix:///var/run/docker.sock
    # Définit la chemin ou se trouve votre projet Drupal, afin que Nginx connaissent l'emplacement sur lequel il doit agir
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    # Définit la chemin ou se trouve votre le fichier de prépogrammation algorithmique .sock de Docker, afin que Portainer connaissent l'emplacement sur lequel il doit agir
    labels:
      - "traefik.http.routers.${PROJECT_NAME}_portainer.rule=Host(`portainer.${PROJECT_BASE_URL}`)"

#######################################################################################################
  # Nom de la section du conteneur traefik
  traefik:
    # Image traefik venant de Docker Hub
    image: traefik:v2.0
    # Nom du conteneur (Préfixé du nom de votre projet se trouvant dans le fichier .env)
    container_name: "${PROJECT_NAME}_traefik"
    # Commande exécuté lors de la création du serveur Docker (après exécution de la commande : docker-compose up -d)
    command: --api.insecure=true --providers.docker
    # Définit le port d'accès au stack Docker comprenant tous les composants de notre serveur web 
    ports:
      - 'PORT_DISPONIBLE:80'
#      - '8080:8080' # Dashboard
    # Définit la chemin ou se trouve votre le fichier de prépogrammation algorithmique .sock de Docker, afin que Traefik connaissent l'emplacement sur lequel il doit agir
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
